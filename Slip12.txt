Q.1 Write a Java Program to implement Decorator Pattern for interface Car to define the
assemble() method and then decorate it to Sports car and Luxury Car [15 M]

ANS:
Car.java

package practi5;

public interface Car {
    void assemble();
}
BasicCar.java

package practi5;

public class BasicCar implements Car {

    @Override
    public void assemble() {
        System.out.println("Basic Car assembled.");
    }
}
SportsCar.java

package practi5;

public class SportsCar extends CarDecorator {

    public SportsCar(Car car) {
        super(car);
    }

    @Override
    public void assemble() {
        super.assemble();
        System.out.println("Sports Car features added.");
    }
}
LuxuryCar.java

package practi5;

public class LuxuryCar extends CarDecorator {

    public LuxuryCar(Car car) {
        super(car);
    }

    @Override
    public void assemble() {
        super.assemble();
        System.out.println("Luxury Car features added.");
    }
}
CarDecorator.java

package practi5;

public abstract class CarDecorator implements Car {
    protected Car car;

    public CarDecorator(Car car) {
        this.car = car;
    }

    @Override
    public void assemble() {
        this.car.assemble();
    }
}
TestDecoratorPattern.java

package practi5;

public class TestDecoratorPattern {
    public static void main(String[] args) {
        Car sportsCar = new SportsCar(new BasicCar());
        sportsCar.assemble();
        System.out.println("\n*****");

        Car sportsLuxuryCar = new LuxuryCar(new SportsCar(new BasicCar()));
        sportsLuxuryCar.assemble();
    }
}

Q.2 Write a program to sense the available networks using Arduino

ANS:
#include <SPI.h>
#include <WiFi.h>
void setup() {
// initialize serial and wait for the port to open: Serial.begin(9600);
while (!Serial); // attempt to connect using WEP encryption: Serial.println("Initializing
Wifi...");
printMacAddress(); // scan for existing networks: Serial.println("Scanning available
networks...");
listNetworks();
}
void loop()
{ delay (10000);
// scan for existing networks:
Serial.println ("Scanning available networks...");
 listNetworks();
}
void printMacAddress()
 {
// the MAC address of your Wifi shield byte mac[6];
// print your MAC address:
WiFi.macAddress(mac);
Serial.print("MAC: ");
Serial.print(mac[5], HEX); Serial.print(":");
Serial.print(mac[4], HEX);
Serial.print(":");
Serial.print(mac[3], HEX);
Serial.print(":");
Serial.print(mac[2], HEX);
Serial.print(":");
Serial.print(mac[1], HEX);
Serial.print(":");
Serial.println(mac[0], HEX);
}
void listNetworks() {
// scan for nearby networks:
Serial.println("** Scan Networks **");
byte numSsid = WiFi.scanNetworks();
// print the list of networks seen:
Serial.print("number of available networks:");
Serial.println(numSsid);
// print the network number and name for each network found:
 for (int thisNet = 0; thisNet < numSsid; thisNet++)
 {
Serial.print(thisNet); Serial.print(") ");
Serial.print(WiFi.SSID(thisNet));
Serial.print("\tSignal: ");
Serial.print(WiFi.RSSI(thisNet));
Serial.print(" dBm");
Serial.print("\tEncryption:");
Serial.println(WiFi.encryptionType(thisNet));
}
}