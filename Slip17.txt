Q.1 Write a Java Program to implement Abstract Factory Pattern for Shape interface.
[15 M].

ANS:
// Shape.java
public interface Shape {
    void draw();
}

// Circle.java
public class Circle implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing a Circle");
    }
}

// Rectangle.java
public class Rectangle implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing a Rectangle");
    }
}

// Square.java
public class Square implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing a Square");
    }
}

// AbstractFactory.java
public interface AbstractFactory {
    Shape getShape(String shapeType);
}

// TwoDimensionalShapeFactory.java
public class TwoDimensionalShapeFactory implements AbstractFactory {
    @Override
    public Shape getShape(String shapeType) {
        if (shapeType == null) {
            return null;
        }
        switch (shapeType.toLowerCase()) {
            case "circle":
                return new Circle();
            case "rectangle":
                return new Rectangle();
            case "square":
                return new Square();
            default:
                return null;
        }
    }
}

// ThreeDimensionalShapeFactory.java (optional example for a different category)
public class ThreeDimensionalShapeFactory implements AbstractFactory {
    @Override
    public Shape getShape(String shapeType) {
        // You can create a new set of 3D shapes like Sphere, Cube, etc.
        return null; // Placeholder for 3D shape creation
    }
}

// FactoryProducer.java
public class FactoryProducer {
    public static AbstractFactory getFactory(String choice) {
        if (choice.equalsIgnoreCase("2D")) {
            return new TwoDimensionalShapeFactory();
        } else if (choice.equalsIgnoreCase("3D")) {
            return new ThreeDimensionalShapeFactory();
        }
        return null;
    }
}

// Main.java
public class Main {
    public static void main(String[] args) {
        // Get 2D shape factory
        AbstractFactory shapeFactory = FactoryProducer.getFactory("2D");

        // Get an object of Circle and call its draw method
        Shape shape1 = shapeFactory.getShape("Circle");
        shape1.draw();

        // Get an object of Rectangle and call its draw method
        Shape shape2 = shapeFactory.getShape("Rectangle");
        shape2.draw();

        // Get an object of Square and call its draw method
        Shape shape3 = shapeFactory.getShape("Square");
        shape3.draw();
    }
}

Q.2 Write a program to get temperature notification using Arduino.

ANS:
#define ADC_VREF_mV 5000.0 // in millivolt
#define ADC_RESOLUTION 1024.0
#define PIN_LM35 A0
void setup() { Serial.begin(9600);
} void loop() {
// get the ADC value from the temperature
sensor int adcVal = analogRead(PIN_LM35);
// convert the ADC value to voltage in millivolt
float milliVolt = adcVal * (ADC_VREF_mV / ADC_RESOLUTION);
// convert the voltage to the temperature in Celsius
float tempC = milliVolt / 10;
// convert the Celsius to Fahrenheit
float tempF = tempC * 9 / 5 + 32;
// print the temperature in the Serial Monitor:
Serial.print("Temperature: ");
Serial.print(tempC); // print the temperature in Celsius
Serial.print("°C");
Serial.print(" ~ "); // separator between Celsius and Fahrenheit
Serial.print(tempF); // print the temperature in Fahrenheit Serial.println("°F");
delay(1000);
} 